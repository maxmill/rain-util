{
  "name": "rain-util",
  "tagline": "Generator based swiss knife for consuming apis, accessing postgres, and managing filesystem",
  "body": "# rain-util #\r\n\r\n[![Build Status](https://travis-ci.org/maxmill/rain-util.svg?style=flat-square)](https://travis-ci.org/maxmill/rain-util)\r\n[![npm](https://img.shields.io/npm/v/rain-util.svg?style=flat-square)]()\r\n[![npm](https://img.shields.io/npm/dt/rain-util.svg)]()\r\n[![npm](https://img.shields.io/npm/dm/rain-util.svg)]()\r\n\r\n\r\ngenerator based toolkit for consuming apis, accessing postgres, and managing filesystem\r\n\r\n```\r\nnpm i rain-util\r\nconst $util = require('rain-util');\r\n```\r\n\r\n### for fast prototyping. use sub-packages if only a subset is needed ###\r\n- https://github.com/maxmill/rain-util-http\r\n- https://github.com/maxmill/rain-util-download\r\n- https://github.com/maxmill/rain-util-fs\r\n- https://github.com/maxmill/rain-util-postgres\r\n\r\n\r\n### http requests ###\r\nextends request.js additional properties may be passed as params  (httpSignature, multipart, headers)\r\n```\r\nconst api = new $util.http('https://maps.googleapis.com/');\r\nconst api2 = new $util.http('https://my.api.com/',\r\n  { 'x-default-header':'its value'},\r\n  {httpSignature:{keyId:'rsa-key-1',algorithm='rsa-sha256',signature:'Base64(RSA-SHA256(signing string))'}\r\n);\r\n\r\nconst req = new $util.http();\r\n\r\nconst apiResponse = yield mapsApi.get('maps/api/geocode/json?address=1600+Amphitheatre+Parkway,+Mountain+View,+CA');\r\nconsole.log('apiResponse',apiResponse);\r\nreq.get('full url');\r\n\r\nconst api2Response = yield api2.post('another url', requestBody);\r\n```\r\n\r\n### postgres ###\r\nqueries, data access objects, transactions, schema data\r\n```\r\nconst conn = { host: 'localhost', db: 'postgres', user: 'postgres', password: 'postgres' };\r\nconst $postgres =  new $util.postgres(conn); // connection string also acceptable\r\n\r\nif($postgres) {\r\n  postgres.db.query('SELECT test');\r\n// create a test table\r\n        const tableName = 'testers';\r\n        const testTable = `DROP TABLE IF EXISTS ${tableName}; CREATE TABLE ${tableName}(id CHARACTER constYING(40))WITH(OIDS=FALSE);ALTER TABLE ${tableName} OWNER TO postgres;`;\r\n        yield $postgres.db.query(testTable);\r\n\r\n// load created table into $postgres object\r\n        $postgres.table(tableName);\r\n\r\n// add a record\r\n        const recordId = '4a2b';\r\n        yield $postgres.tables[`${tableName}`].upsert({id: recordId});\r\n\r\n// find created record using dao\r\n        const daoRecord = yield  $postgres.tables[`${tableName}`].findOne('id = ?', recordId);\r\n\r\n// find created record using sql\r\n        const findRecordSQL = `SELECT * FROM ${tableName} WHERE id = '${recordId}'`;\r\n        const sqlRecord = (yield $postgres.db.query(findRecordSQL)).rows[0];\r\n\r\n// add new record\r\n  $postgres.tables.books.upsert({id:'4324'})\r\n\r\n//within transaction, find new record and then delete it\r\n  $postgres.db.transaction(function*() {\r\n    let record = yield $postgres.tables[`${tableName}`].findOne('id = ?', '4324');  \r\n    yield $postgres.dao.delete(record); // delete by model throws if more than one row is affected\r\n    yield $postgres.dao.delete('id = 4324'); // delete by query, returns count\r\n  });\r\n}\r\n\r\n\r\n// get schema information\r\nconst schema = yield $postgres.schema();\r\n```\r\n\r\n\r\n### generator utilities ###\r\n```\r\nutil.genify - (function) convert regular functions into generator functions\r\nyield util.array.(forEach|map|filter|forEachSeries)\r\n```\r\n\r\n### file utilities ###\r\nextends co-fs - all core node fs methods available as generators\r\n```\r\n$util.fs.download   - (file or file array) downloads url(s) to file(s)\r\n$util.fs.upsert     - (dir or dir array) creates dir if non-existent (uses mkdirp)\r\n$util.fs.fetch     - (file or dir) read file or directory contents\r\n$util.fs.rimraf     - (path) yieldable rm -rf\r\n$util.fs.json.(read|write)  - (file, obj, options)\r\n```\r\n\r\n\r\ntested with LTS and latest node versions\r\n\r\n### credits ###\r\n\r\n- https://github.com/request/request\r\n- https://github.com/jprichardson/node-jsonfile\r\n- https://github.com/substack/node-mkdirp\r\n- https://github.com/evs-chris/node-postgres-gen\r\n- https://www.npmjs.com/package/array-generators\r\n",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}